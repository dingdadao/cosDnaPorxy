name: Go Multi-Platform Build and Release

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.version.outputs.version }}
    strategy:
      fail-fast: false
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64]
        include:
          - os: windows
            ext: .exe
            archive: zip
          - os: linux
            ext: ""
            archive: tar.gz
          - os: darwin
            ext: ""
            archive: tar.gz

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整的git历史记录

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.4'

      - name: Generate version tag
        id: version
        run: |
          SHORT_HASH=$(git rev-parse --short HEAD)
          DATE=$(date -u +'%Y%m%d%H%M%S')
          echo "version=v${DATE}-${SHORT_HASH}" >> $GITHUB_OUTPUT
          echo "VERSION=v${DATE}-${SHORT_HASH}" >> $GITHUB_ENV

      - name: Build binary
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o dnsproxy${{ matrix.ext }} main.go

      - name: Create release package
        run: |
          PACKAGE_NAME="dnsproxy-${{ matrix.os }}-${{ matrix.arch }}-${{ env.VERSION }}"
          if [ "${{ matrix.archive }}" = "zip" ]; then
            zip $PACKAGE_NAME.zip dnsproxy${{ matrix.ext }} config.yaml
          else
            tar -czvf $PACKAGE_NAME.tar.gz dnsproxy${{ matrix.ext }} config.yaml
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dnsproxy-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            dnsproxy-*-*.zip
            dnsproxy-*-*.tar.gz
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build.outputs.version }}
          name: "Release ${{ needs.build.outputs.version }}"
          files: release-artifacts/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}